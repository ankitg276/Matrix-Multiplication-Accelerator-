// Basic Gates

module AND2 (
    input a,
    input b,
    output y
);
    assign y = a & b;
endmodule

module XOR2 (
    input a,
    input b,
    output y
);
    assign y = a ^ b;
endmodule

module OR2 (
    input a,
    input b,
    output y
);
    assign y = a | b;
endmodule

// Full Adder

module FullAdder (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    wire axorb, aandb, axorbandcin;
    
    XOR2 u1 (.a(a), .b(b), .y(axorb));
    XOR2 u2 (.a(axorb), .b(cin), .y(sum));
    AND2 u3 (.a(a), .b(b), .y(aandb));
    AND2 u4 (.a(axorb), .b(cin), .y(axorbandcin));
    OR2  u5 (.a(aandb), .b(axorbandcin), .y(cout));
endmodule

// 4-bit Adder

module FourBitAdder (
    input [3:0] a,
    input [3:0] b,
    output [4:0] sum
);
    wire c1, c2, c3;

    FullAdder fa0 (.a(a[0]), .b(b[0]), .cin(1'b0), .sum(sum[0]), .cout(c1));
    FullAdder fa1 (.a(a[1]), .b(b[1]), .cin(c1), .sum(sum[1]), .cout(c2));
    FullAdder fa2 (.a(a[2]), .b(b[2]), .cin(c2), .sum(sum[2]), .cout(c3));
    FullAdder fa3 (.a(a[3]), .b(b[3]), .cin(c3), .sum(sum[3]), .cout(sum[4]));
endmodule

// 4-bit Multiplier

module FourBitMultiplier (
    input [3:0] a,
    input [3:0] b,
    output [7:0] product
);
    wire [3:0] p0, p1, p2, p3;
    wire [4:0] sum1, sum2, sum3;

    // Partial products
    AND2 u0 (.a(a[0]), .b(b[0]), .y(p0[0]));
    AND2 u1 (.a(a[1]), .b(b[0]), .y(p0[1]));
    AND2 u2 (.a(a[2]), .b(b[0]), .y(p0[2]));
    AND2 u3 (.a(a[3]), .b(b[0]), .y(p0[3]));

    AND2 u4 (.a(a[0]), .b(b[1]), .y(p1[0]));
    AND2 u5 (.a(a[1]), .b(b[1]), .y(p1[1]));
    AND2 u6 (.a(a[2]), .b(b[1]), .y(p1[2]));
    AND2 u7 (.a(a[3]), .b(b[1]), .y(p1[3]));

    AND2 u8 (.a(a[0]), .b(b[2]), .y(p2[0]));
    AND2 u9 (.a(a[1]), .b(b[2]), .y(p2[1]));
    AND2 u10 (.a(a[2]), .b(b[2]), .y(p2[2]));
    AND2 u11 (.a(a[3]), .b(b[2]), .y(p2[3]));

    AND2 u12 (.a(a[0]), .b(b[3]), .y(p3[0]));
    AND2 u13 (.a(a[1]), .b(b[3]), .y(p3[1]));
    AND2 u14 (.a(a[2]), .b(b[3]), .y(p3[2]));
    AND2 u15 (.a(a[3]), .b(b[3]), .y(p3[3]));

    // Shift and add partial products
    FourBitAdder adder1 (.a({p1, 1'b0}), .b({4'b0, p0}), .sum(sum1));
    FourBitAdder adder2 (.a({p2, 2'b0}), .b(sum1[4:1]), .sum(sum2));
    FourBitAdder adder3 (.a({p3, 3'b0}), .b(sum2[4:1]), .sum(sum3));

    assign product = {sum3, sum2[0], sum1[0], p0[0]};

endmodule
